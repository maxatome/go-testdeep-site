// cmp-funcs-begin OMIT
        Cmp(t TestingT, got, expected any,            args ...any) bool
   CmpError(t TestingT, got error,                    args ...any) bool
   CmpFalse(t TestingT, got any,                      args ...any) bool
     CmpLax(t TestingT, got, expected any,            args ...any) bool
 CmpNoError(t TestingT, got error,                    args ...any) bool
     CmpNot(t TestingT, got, notExpected any,         args ...any) bool
CmpNotPanic(t TestingT, fn func(),                    args ...any) bool
   CmpPanic(t TestingT, fn func(), expectedPanic any, args ...any) bool
    CmpTrue(t TestingT, got any,                      args ...any) bool
// cmp-funcs-end OMIT


// test-names-example-begin OMIT
td.Cmp(t, got, "Bob", `Hey! got has to be "Bob" here!`)
// test-names-example-end OMIT


// test-names-proto-begin OMIT
func Cmp(t TestingT, got, expected any, args ...any) bool
// test-names-proto-end OMIT


// test-names-doc-begin OMIT
// "args..." are optional and allow to name the test. This name is
// used in case of failure to qualify the test. If len(args) > 1 and
// the first item of "args" is a string and contains a '%' rune then
// fmt.Fprintf is used to compose the name, else "args" are passed to
// fmt.Fprint. Do not forget it is the name of the test, not the
// reason of a potential failure.
// test-names-doc-end OMIT


// test-names-fprint-begin OMIT
td.Cmp(t, got, 12, "Check got is ", 12)   → fmt.Fprint
td.Cmp(t, got, 12, "Check got is %d", 12) → fmt.Fprintf
td.Cmp(t, got, 12, lastErr)               → fmt.Fprint
// test-names-fprint-end OMIT


// operators-example-begin OMIT
              here ↴
td.Cmp(t, age,     td.Between(40, 45))
td.Cmp(t, headers, td.ContainsKey("X-Ovh"))
td.Cmp(t, err,     td.Contains("Internal server error"))
td.Cmp(t, grants,  td.Len(td.Gt(2)))
td.Cmp(t, price,   td.N(float64(12.03), float64(0.01)))
td.Cmp(t, name,    td.Re(`^[A-Z][A-Za-z-]+\z`))
td.Cmp(t, ids,     td.Set(789, 456, 123))
td.Cmp(t, tags,    td.SuperMapOf(map[string]bool{"enabled": true, "shared": true}, nil))
// operators-example-end OMIT


// operators-all-begin OMIT
All         Contains      HasPrefix     Len       Not        ReAll     String        SuperSetOf
Any         ContainsKey   HasSuffix     Lt        NotAny     Recv      Struct        SuperSliceOf
Array       Delay         Ignore        Lte       NotEmpty   SStruct   SubBagOf      Tag
ArrayEach   Empty         Isa           Map       NotNaN     Set       SubJSONOf     TruncTime
Bag         ErrorIs       JSON          MapEach   NotNil     Shallow   SubMapOf      Values
Between     First         JSONPointer   N         NotZero    Slice     SubSetOf      Zero
Cap         Grep          Keys          NaN       PPtr       Smuggle   SuperBagOf
Catch       Gt            Last          Nil       Ptr        Sort      SuperJSONOf
Code        Gte           Lax           None      Re         Sorted    SuperMapOf
// operators-all-end OMIT

// shortcuts-pattern-begin OMIT
td.Cmp(t, got, td.HasPrefix(expectedPrefix), …) → td.CmpHasPrefix(t, got, expectedPrefix, …)
td.Cmp(t, got, td.HasSuffix(expectedSuffix), …) → td.CmpHasSuffix(t, got, expectedSuffix, …)
                  ¯¯¯¯¯¯¯¯¯                             ¯¯¯¯¯¯¯¯¯
td.Cmp(t, got, td.NotEmpty(), …) → td.CmpNotEmpty(t, got, …)
                  ¯¯¯¯¯¯¯¯               ¯¯¯¯¯¯¯¯
// shortcuts-pattern-end OMIT


// shortcuts-notlax-begin OMIT
td.Cmp(t, got, td.Not(notExpected)) → td.CmpNot(t, got, notExpected)
td.Cmp(t, got, td.Lax(expected))    → td.CmpLax(t, got, expected)
                  ¯¯¯                       ¯¯¯
// shortcuts-notlax-end OMIT


// tdt-anchor-begin OMIT
func (t *T)      A(operator TestDeep, model ...any) any
func (t *T) Anchor(operator TestDeep, model ...any) any

func      A[X any](t *T, operator TestDeep) X
func Anchor[X any](t *T, operator TestDeep) X

func (t *T) AnchorsPersistTemporarily() func()
func (t *T) DoAnchorsPersist() bool
func (t *T) ResetAnchors()
func (t *T) SetAnchorsPersist(persist bool)
// tdt-anchor-end OMIT


// nested1-begin OMIT
CmpNotZero(t, …) — CmpBetween(t, …) — CmpLen(t, …)
// nested1-end OMIT


// nested2-begin OMIT
SStruct(model any, expectedFields StructFields)
// nested2-end OMIT


// anat-anchor-begin OMIT
func (t *T) A(operator TestDeep, model ...any) any // HL
                ↳ operator to use  ↳ mandatory if the type can not be guessed from the operator

assert.A(td.Between(40, 45)).(int)         // model optional, when operator knows the type behind
assert.A(td.NotZero(), int64(666)).(int64) // mandatory if type behind operator can't be guessed
assert.A(td.NotZero(), reflect.TypeOf(int64(666))).(int64) // for reflect lovers…

func A[X any](t *T, operator TestDeep) X // HL
        ↳ expected type  ↳ operator to use

td.A[int](assert, td.Between(40, 45))
td.A[int64](assert, td.NotZero())
// anat-anchor-end OMIT


// tdt1-construction-begin OMIT
func          NewT(t testing.TB, config ...ContextConfig) *T        // inherit properties from t
func        Assert(t testing.TB, config ...ContextConfig) *T        // test failures are not fatal
func       Require(t testing.TB, config ...ContextConfig) *T        // t.Fatal if a test fails
func AssertRequire(t testing.TB, config ...ContextConfig) (*T, *T)  // Assert() + Require()
// tdt1-construction-end OMIT


// tdt1-configuring-begin OMIT
func (t *T) BeLax(enable ...bool) *T           // enable/disable strict type comparison
func (t *T) FailureIsFatal(enable ...bool) *T  // enable/disable failure "fatality"
func (t *T) IgnoreUnexported(types ...any) *T  // ignore unexported fields of some structs
func (t *T) RootName(rootName string) *T       // change data root name, "DATA" by default
func (t *T) UseEqual(types ...any) *T          // delegate cmp to Equal() method if available
// tdt1-configuring-end OMIT


// tdt2-main-begin OMIT
func (t *T)         Cmp(got, expected any,       args ...any) bool
func (t *T)    CmpError(got error,               args ...any) bool
func (t *T)      CmpLax(got, expected any,       args ...any) bool
func (t *T)  CmpNoError(got error,               args ...any) bool
func (t *T) CmpNotPanic(fn func(),               args ...any) bool
func (t *T)    CmpPanic(fn func(), expected any, args ...any) bool
func (t *T)       False(got any,                 args ...any) bool
func (t *T)         Not(got, notExpected any,    args ...any) bool
func (t *T)        True(got any,                 args ...any) bool

func (t *T)              Run(name string, f func(t *T)) bool
func (t *T) RunAssertRequire(name string, f func(assert, require *T)) bool
// tdt2-main-end OMIT

// tdt2-main2-begin OMIT
func EqDeeply(got, expected any) bool
func EqDeeplyError(got, expected any) error
// tdt2-main2-end OMIT


// tdt3-shortcuts-begin OMIT
t.Cmp(got, td.HasPrefix(expected), …) → t.HasPrefix(got, expected, …)
t.Cmp(got, td.HasSuffix(expected), …) → t.HasSuffix(got, expected, …)
              ¯¯¯¯¯¯¯¯¯                   ¯¯¯¯¯¯¯¯¯
t.Cmp(got, td.NotEmpty(), …) → t.NotEmpty(t, got, …)
              ¯¯¯¯¯¯¯¯           ¯¯¯¯¯¯¯¯
// tdt3-shortcuts-end OMIT

// tdt3-not-begin OMIT
t.Cmp(got, td.Not(notExpected)) → t.Not(got, notExpected)
              ¯¯¯                   ¯¯¯
// tdt3-not-end OMIT

// tdt6-WithCmpHooks-begin OMIT
assert = assert.WithCmpHooks(
  func (got, expected reflect.Value) bool {
    return td.EqDeeply(got.Interface(), expected.Interface())
  },
  (time.Time).Equal, // bypasses the UseEqual flag
)
x := 123
assert.Cmp(reflect.ValueOf(x), reflect.ValueOf(123)) // succeeds
// tdt6-WithCmpHooks-end OMIT

// tdt6-WithSmuggleHooks-begin OMIT
assert = assert.WithSmuggleHooks(
  func (got int) bool { return got != 0 }, // each int is changed to a bool
  strconv.Atoi,                            // each string is converted to an int
)
assert.Cmp("123", 123) // succeeds
// tdt6-WithSmuggleHooks-end OMIT

// smugglers-begin OMIT
Cap     Contains      ErrorIs   Grep          Keys   Lax   PPtr   Recv      Sort   Values
Catch   ContainsKey   First     JSONPointer   Last   Len   Ptr    Smuggle   Tag
// smugglers-end OMIT

// smugglers-example-begin OMIT
td.Cmp(t, slice,   td.Len(td.Between(3, 4)))
td.Cmp(t, headers, td.ContainsKey(td.HasPrefix("X-Ovh")))
td.Cmp(t, &age,    td.Ptr(td.Gt(18)))
td.Cmp(t, ageStr,  td.Smuggle(strconv.Atoi, td.Catch(&age, td.Gt(18))))
td.Cmp(t, body1,   td.Smuggle(json.RawMessage{}, td.JSON(`{"name": $br}`, td.Tag("br", "Brian"))))
td.Cmp(t, body2,   td.Smuggle("Service.Owner.Children[0].Name", "Alice"))
td.Cmp(t, body2,   td.JSONPointer("/service/owner/children/0/name", "Alice"))
td.Cmp(t, headers, td.Keys(td.SuperSetOf("X-Ovh", "X-Remote-Ip")))
td.Cmp(t, err,     td.Contains("integrity constraint"))
td.Cmp(t, bytes,   td.Lax("pipo bingo!"))
// smugglers-example-end OMIT

// tdsuite-begin OMIT
Setup(t *td.T) error
Destroy(t *td.T) error
PreTest(t *td.T, testName string) error
PostTest(t *td.T, testName string) error
BetweenTests(t *td.T, previousTestName, nextTestName string) error
// tdsuite-end OMIT
