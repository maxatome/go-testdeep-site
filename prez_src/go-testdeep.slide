# go-testdeep

Maxime Soulé
2025-09-10
https://go-testdeep.zetta.rocks/


##

.image logo.svg 500 _


##

.image enlarge-your-tests.svg 500 _


## Go testing

Why a test framework?

To avoid boilerplate code, especially error reports
[🔗](https://goplay.tools/snippet/IUn7QyAGlDO)

.code without-framework.go /^import/,/^}/


## Using a test framework

For example using [go-testdeep](https://go-testdeep.zetta.rocks/)
[🔗](https://goplay.tools/snippet/kegHifglchh)

.code with-framework.go /^import/,/^}/

In most cases, there is not even test names
[🔗](https://goplay.tools/snippet/_H3-Ru-fq9H)

.code with-framework.go /without-test-name/,/^}/


## Why go-testdeep instead of an existing framework?

Custom comparison engine allowing the use of powerful operators

Accurate and colored [error reports](https://go-testdeep.zetta.rocks/introduction/#error-output)

[70 operators](https://go-testdeep.zetta.rocks/operators/) to match in
all circumstances

Fully [documented](https://pkg.go.dev/github.com/maxatome/go-testdeep/td)
with plenty examples

Consistent API: `got` parameter is always before `expected` one

Very few basic functions, all others are operators shortcuts _(args... allow to name tests)_:

.code code.txt /cmp-funcs-begin/,/cmp-funcs-end/


## Why go-testdeep instead of an existing framework? (part 2)

Unique [anchoring feature](https://go-testdeep.zetta.rocks/example/anchoring/),
to easily test literals

[JSON](https://go-testdeep.zetta.rocks/operators/json/) content
testable like never before

Table driven tests are simple to write and maintain

Comparison engine can be [configured](https://pkg.go.dev/github.com/maxatome/go-testdeep/td#pkg-variables)
to be lax, to ignore struct unexported fields, to treat specifically some
types, to display _N_ errors before giving up

Efficient [flattening](https://pkg.go.dev/github.com/maxatome/go-testdeep/td#Flatten)
of `[]X` slices into `...any` of variadic functions

A function returning several values can be tested in one call, thanks to
[tuples](https://pkg.go.dev/github.com/maxatome/go-testdeep/td#Tuple)

[tdhttp](https://pkg.go.dev/github.com/maxatome/go-testdeep/helpers/tdhttp)
helper allows to easily test HTTP APIs regardless of the web framework used

[tdsuite](https://pkg.go.dev/github.com/maxatome/go-testdeep/helpers/tdsuite)
helper handles consistent and flexible suites of tests

Probably some others reasons you will discover by yourself :)


## Test names

As many testing frameworks, tests can optionally be named
[🔗](https://goplay.tools/snippet/J8TQd1Bd69I)

.code code.txt /test-names-example-begin/,/test-names-example-end/

Each `Cmp*` function cleverly accepts
[fmt.Fprintf](https://golang.org/pkg/fmt/#Fprintf) or
[fmt.Fprint](https://golang.org/pkg/fmt/#Fprint) parameters in `args`

.code code.txt /test-names-proto-begin/,/test-names-proto-end/

The doc says:

.code code.txt /test-names-doc-begin/,/test-names-doc-end/

So, no risk of mistake between
[Cmp](https://pkg.go.dev/github.com/maxatome/go-testdeep/td#Cmp) and
a (nonexistent) Cmpf: only use
[Cmp](https://pkg.go.dev/github.com/maxatome/go-testdeep/td#Cmp)!
[🔗](https://goplay.tools/snippet/D_yOUslC2xJ)

.code code.txt /test-names-fprint-begin/,/test-names-fprint-end/


## Custom comparison engine

Derived from
[reflect.DeepEqual](https://golang.org/pkg/reflect/#DeepEqual) and
heavily modified to integrate operators handling

It allows go-testdeep to know exactly where a test fails in a big
structure, and even to continue testing in this structure to report
several mismatches at the same time (up to 10 by default)

Reports are also very accurate and colorized, instead of awful diffs you see elsewhere…

.image colored-output.svg


## 70 operators to match in all circumstances

Some examples, see the expected (3rd) parameter
[🔗](https://goplay.tools/snippet/qrWLPxbrSg7)

.code code.txt /operators-example-begin/,/operators-example-end/

[All operators](https://go-testdeep.zetta.rocks/operators/) follow

.code code.txt /operators-all-begin/,/operators-all-end/


## Almost all operators have shortcuts

Always the same pattern

.code code.txt /shortcuts-pattern-begin/,/shortcuts-pattern-end/

You just understood
[CmpNot](https://pkg.go.dev/github.com/maxatome/go-testdeep/td#CmpNot)
and
[CmpLax](https://pkg.go.dev/github.com/maxatome/go-testdeep/td#CmpLax)
were in fact shortcuts :)

.code code.txt /shortcuts-notlax-begin/,/shortcuts-notlax-end/

Using a shortcut is not mandatory, it could just be more readable in some cases (or not)

4 operators without shortcut:
[Catch](https://go-testdeep.zetta.rocks/operators/catch/),
[Delay](https://go-testdeep.zetta.rocks/operators/delay/),
[Ignore](https://go-testdeep.zetta.rocks/operators/ignore/),
[Tag](https://go-testdeep.zetta.rocks/operators/tag/),
because having a shortcut in these cases is a nonsense


## Matching nested structs/slices/maps

Take this structure returned by a `GetPerson` function:

.code nested.go /^type Person/,/^}/

We want to check:

- Bob, is 40 to 45 year-old
- has a non-zero ID
- has 2 children
  - Alice, 20 year-old, and Brian, 18 year-old
  - both with a non-zero ID too
  - both without any children


## Operators in nested structs/slices/maps — 1/4 classic way, like others

Like other frameworks, we can do [🔗](https://goplay.tools/snippet/7V3D7ylIwA4)

.code nested.go /nested1-begin/,/nested1-end/

Exercise: replace the following shortcuts in the code above ↑
[🔗](https://goplay.tools/snippet/UTUSegMNb53)

.code code.txt /nested1-begin/,/nested1-end/


## Operators in nested structs/slices/maps — 2/4 using SStruct operator

[SStruct](https://go-testdeep.zetta.rocks/operators/sstruct/)
is the strict-[Struct](https://go-testdeep.zetta.rocks/operators/struct/)
operator

.code code.txt /nested2-begin/,/nested2-end/

Strict because omitted fields are checked against their zero value, instead of ignoring them
[🔗](https://goplay.tools/snippet/8XV4mnP5Phn)

.code nested.go /nested2-begin/,/nested2-end/


## Operators in nested structs/slices/maps — 3/4 using JSON operator

[JSON](https://go-testdeep.zetta.rocks/operators/json/)
allows to compare the JSON representation (comments are allowed!)
[🔗](https://goplay.tools/snippet/TnAa2903rWQ)

.code nested.go /nested3-begin/,/nested3-end/


## Operators in nested structs/slices/maps — 3/4 using JSON + Bag ops

[JSON](https://go-testdeep.zetta.rocks/operators/json/)
allows to compare the JSON representation (comments are allowed!)
[🔗](https://goplay.tools/snippet/Z8W6Q7N2V1x)

.code nested.go /nested3-bag-begin/,/nested3-bag-end/


## Operators in nested structs/slices/maps — 4/4 using anchoring

Anchoring feature allows to put operators directly in literals

To keep track of anchors, a
[td.T](https://pkg.go.dev/github.com/maxatome/go-testdeep/td#T)
instance is needed
[🔗](https://goplay.tools/snippet/g507x9S9DW6)

.code nested.go /nested4-begin/,/nested4-end/


## Anatomy of an anchor

Anchors are created using
[A](https://pkg.go.dev/github.com/maxatome/go-testdeep/td#T.A) (or
[Anchor](https://pkg.go.dev/github.com/maxatome/go-testdeep/td#T.Anchor))
method of
[*td.T](https://pkg.go.dev/github.com/maxatome/go-testdeep/td#T)
or [td.A](https://pkg.go.dev/github.com/maxatome/go-testdeep/td#A)
(or [td.Anchor](https://pkg.go.dev/github.com/maxatome/go-testdeep/td#Anchor))
function

They generate a specific value that can be retrieved during the
comparison process

.code code.txt /anat-anchor-begin/,/anat-anchor-end/

Conflicts are possible, so be careful with 8 and 16 bits types

Work for pointers, slices, maps, but not available for `bool` types

Specific handling is needed for structs, see
[AddAnchorableStructType](https://pkg.go.dev/github.com/maxatome/go-testdeep/td#AddAnchorableStructType)
function


## Encapsulating testing.T

Instead of doing [🔗](https://goplay.tools/snippet/8X1uV_S-Ss8)

.code td_t.go /^func TestVals/,/^}/

one can build a
[td.T](https://pkg.go.dev/github.com/maxatome/go-testdeep/td#T)
instance encapsulating the
[testing.T](https://golang.org/pkg/testing/#T) one
[🔗](https://goplay.tools/snippet/qnTFVPdV-vH)

.code td_t.go /tdt-begin/,/^}/

Building a
[td.T](https://pkg.go.dev/github.com/maxatome/go-testdeep/td#T)
instance provides some advantages over using td.Cmp* functions
directly


## td.T — Introduction — 1/7

.code td_t.go /^type T /,/^}/

See
[testing.TB](https://golang.org/pkg/testing/#TB)
interface,
[ContextConfig](https://pkg.go.dev/github.com/maxatome/go-testdeep/td#ContextConfig)
struct and
[DefaultContextConfig](https://pkg.go.dev/github.com/maxatome/go-testdeep/td#pkg-variables)
variable

Construction:

.code code.txt /tdt1-construction-begin/,/tdt1-construction-end/

Configuring
[*td.T](https://pkg.go.dev/github.com/maxatome/go-testdeep/td#T)
instance (return a new instance):

.code code.txt /tdt1-configuring-begin/,/tdt1-configuring-end/


## td.T — Main methods — 2/7

.code code.txt /tdt2-main-begin/,/tdt2-main-end/

In fact mostly the same as main functions, but:
- [CmpFalse()](https://pkg.go.dev/github.com/maxatome/go-testdeep/td#CmpFalse) / [CmpTrue()](https://pkg.go.dev/github.com/maxatome/go-testdeep/td#CmpTrue) → [(t *T) False()](https://pkg.go.dev/github.com/maxatome/go-testdeep/td#T.False) / [(t *T) True()](https://pkg.go.dev/github.com/maxatome/go-testdeep/td#T.True)
- [CmpNot()](https://pkg.go.dev/github.com/maxatome/go-testdeep/td#CmpNot) → [(t *T) Not()](https://pkg.go.dev/github.com/maxatome/go-testdeep/td#T.Not)
- new [(t *T) Run()](https://pkg.go.dev/github.com/maxatome/go-testdeep/td#T.Run) and [(t *T) RunAssertRequire()](https://pkg.go.dev/github.com/maxatome/go-testdeep/td#T.RunAssertRequire)

See [documentation](https://go-testdeep.zetta.rocks/functions/td-t/)
for details


## td.T — Shortcuts — 3/7

Shortcuts, as for td functions, follow always the same pattern:

.code code.txt /tdt3-shortcuts-begin/,/tdt3-shortcuts-end/

So yes,
[T.Not](https://pkg.go.dev/github.com/maxatome/go-testdeep/td#T.Not)
is in fact a shortcut:

.code code.txt /tdt3-not-begin/,/tdt3-not-end/

The only exception is
[T.CmpLax](https://pkg.go.dev/github.com/maxatome/go-testdeep/td#T.CmpLax)
method, shortcut of
[td.Lax](https://go-testdeep.zetta.rocks/operators/lax/) operator, it
is more relevant than a T.Lax method

Same 4 operators without shortcut:
[Catch](https://go-testdeep.zetta.rocks/operators/catch/),
[Delay](https://go-testdeep.zetta.rocks/operators/delay/),
[Ignore](https://go-testdeep.zetta.rocks/operators/ignore/),
[Tag](https://go-testdeep.zetta.rocks/operators/tag/),
because having a shortcut in these cases is a nonsense


## td.T — Anchoring — 4/7

Anchoring related methods & functions:

.code code.txt /tdt-anchor-begin/,/tdt-anchor-end/

[A](https://pkg.go.dev/github.com/maxatome/go-testdeep/td#T.A) and
[Anchor](https://pkg.go.dev/github.com/maxatome/go-testdeep/td#T.Anchor)
allow both to anchor an operator, the first is just shorter to write

The generic versions
[A](https://pkg.go.dev/github.com/maxatome/go-testdeep/td#A)
and [Anchor](https://pkg.go.dev/github.com/maxatome/go-testdeep/td#Anchor)
are often shorter to write

By default, anchoring is effective only for the next Cmp* call, but
this can be overridden thanks to
[SetAnchorsPersist](https://pkg.go.dev/github.com/maxatome/go-testdeep/td#T.SetAnchorsPersist)
and
[AnchorsPersistTemporarily](https://pkg.go.dev/github.com/maxatome/go-testdeep/td#T.AnchorsPersistTemporarily)

Useful for helpers writers or table driven tests _afficionados_ :)


## td.T — Simple example — 5/7

[🔗](https://goplay.tools/snippet/dqRj7N_Yte6)

.code tdt4.go /^import/,/^}/


## td.T — Simple example with generics — 6/7

[🔗](https://goplay.tools/snippet/xYstCq593Ds)

.code tdt4-generic.go /^import/,/^}/


## td.T — Advanced usage — 7/7

[WithCmpHooks](https://pkg.go.dev/github.com/maxatome/go-testdeep/td#T.WithCmpHooks)
allows to register comparison functions for some types
[🔗](https://goplay.tools/snippet/-NGjAMq5zbD)

.code code.txt /tdt6-WithCmpHooks-begin/,/tdt6-WithCmpHooks-end/

[WithSmuggleHooks](https://pkg.go.dev/github.com/maxatome/go-testdeep/td#T.WithSmuggleHooks)
allows to register functions to alter the data before comparing it
[🔗](https://goplay.tools/snippet/bp8J5X_2CtK)

.code code.txt /tdt6-WithSmuggleHooks-begin/,/tdt6-WithSmuggleHooks-end/

Smuggle hooks are run just before Cmp hooks and are not run again for
their returned value

## Table driven tests — the heaven of go-testdeep operators

[🔗](https://goplay.tools/snippet/LepqVEN140Q)

.code example_test.go /^var personTests/,/end OMIT/


## Operators types

There is two kinds of operators: classic ones and smuggler ones

A [**smuggler operator**](https://go-testdeep.zetta.rocks/operators/#smuggler-operators)
is an operator able to transform the value (by changing its value or
even its type) before comparing it

Smuggler operators follows:

.code code.txt /smugglers-begin/,/smugglers-end/

Some examples [🔗](https://goplay.tools/snippet/OEFin92sp8I)

.code code.txt /smugglers-example-begin/,/smugglers-example-end/


## Custom operators — for beginners

Two operators [Code](https://go-testdeep.zetta.rocks/operators/code/)
and [Smuggle](https://go-testdeep.zetta.rocks/operators/smuggle/)
allow to achieve what others cannot for your very special use cases

Below, only the year of [time.Time](https://golang.org/pkg/time/#Time)
is important

With [Code](https://go-testdeep.zetta.rocks/operators/code/), you do the test
[🔗](https://goplay.tools/snippet/i7eXzG1m0fi)

.code custom.go /Code-begin/,/Code-end/

With [Smuggle](https://go-testdeep.zetta.rocks/operators/smuggle/),
you transform the value and delegate the test
[🔗](https://goplay.tools/snippet/kPvonEYKf8l)

.code custom.go /Smuggle-begin/,/Smuggle-end/

Discover more features in each operator description


## Custom operators — master class 1/2

Sometimes you need to test something over and over, let's do your own operator!

.code custom.go /^func CheckDateGte/,/^}/

Ensures that a RFC3339-stringified date has "Z" suffix and is well
RFC3339-formatted. Then check it is greater or equal than `t`
truncated to milliseconds

Additionally, if `catch` is non-nil, stores the resulting
[time.Time](https://golang.org/pkg/time/#Time)
in `*catch`


## Custom operators — master class 2/2

This new operator is useful when used with
[JSON](https://go-testdeep.zetta.rocks/operators/json/) operator
[🔗](https://goplay.tools/snippet/fgnmltcoQTe)

.code custom.go /TestCreateArticle-BEGIN/,/TestCreateArticle-END/


## The tdhttp helper or how to easily test a http.Handler

And now you want to test your API, aka a
[http.Handler](https://golang.org/pkg/net/http/#Handler)

Thanks to the [tdhttp
helper](https://pkg.go.dev/github.com/maxatome/go-testdeep/helpers/tdhttp)
and all these *#@!# operators, nothing is easier!
[🔗](https://goplay.tools/snippet/9KVNvHhLhAa)

.code tdhttp.go /^import/,/^}/


## tdhttp for any framework

`myAPI` is here an [http.Handler](https://golang.org/pkg/net/http/#Handler) ↴

.code tdhttp.go /ta := tdhttp.NewTestAPI/,/ta-end/

That's pretty cool as:

- gin-gonic [*gin.Engine](https://pkg.go.dev/github.com/gin-gonic/gin#Engine)
- net/http [*http.ServeMux](https://golang.org/pkg/net/http/#ServeMux)
- go-swagger [restapi.configureAPI()](https://github.com/go-swagger/go-swagger/blob/master/generator/templates/server/configureapi.gotmpl#L47) or [restapi.HandlerAPI()](https://github.com/go-swagger/go-swagger/blob/master/generator/templates/contrib/stratoscale/server/configureapi.gotmpl#L88) return value
- Beego, echo, gorilla/mux, HttpRouter, pat
- any other?

implement all [http.Handler](https://golang.org/pkg/net/http/#Handler)!
Check the
[HTTP frameworks section](https://go-testdeep.zetta.rocks/faq/#and-what-about-other-http-frameworks)
of the [FAQ](https://go-testdeep.zetta.rocks/faq/)

You can now change your web framework and keep your test framework :)


## tdhttp for any content

Ready to use GET, POST, PATCH, PUT, DELETE, HEAD requests, but can be
fed by any already created
[http.Request](https://golang.org/pkg/net/http/#Request)

Supports out of the box `application/x-www-form-urlencoded`,
`application/json`, `application/xml` and `multipart/form-data` encoding &
[cookies](https://pkg.go.dev/github.com/maxatome/go-testdeep/helpers/tdhttp#TestAPI.CmpCookies)

Supports `string` and `[]byte` bodies so you can handle the encoding by yourself

Operator anchoring works out of the box too
[🔗](https://goplay.tools/snippet/hyBG7R-RjKO)

.code tdhttp.go /TestMyApiAnchor/,/^}/


## tdhttp with easy debug

Thanks to [AutoDumpResponse](https://pkg.go.dev/github.com/maxatome/go-testdeep/helpers/tdhttp#TestAPI.AutoDumpResponse),
[Or](https://pkg.go.dev/github.com/maxatome/go-testdeep/helpers/tdhttp#TestAPI.Or) &
[OrDumpResponse](https://pkg.go.dev/github.com/maxatome/go-testdeep/helpers/tdhttp#TestAPI.OrDumpResponse)
methods, you can inpect the HTTP response to see what happened in case
of failure [🔗](https://goplay.tools/snippet/LBNQ8E6EZNC)

.code tdhttp.go /TestMyApiDumpIfFailure/,/^\}$/


## The tdsuite helper — Simple example — 1/3

Or tests suites with one hand tied behind your back
[🔗](https://goplay.tools/snippet/Q2sOarlYGX6)

.code tdsuite.go /^import/,/very-end/


## tdsuite — All hooks — 2/3

Each method Test* of the suite is run in a sub-test

`assert` or `assert+require`, you choose

Several hooks can be implemented:

.code code.txt /tdsuite-begin/,/tdsuite-end/

[Setup](https://pkg.go.dev/github.com/maxatome/go-testdeep/helpers/tdsuite#Setup)
and
[Destroy](https://pkg.go.dev/github.com/maxatome/go-testdeep/helpers/tdsuite#Destroy)
are respectively called before any test is run and after all tests ran

[PreTest](https://pkg.go.dev/github.com/maxatome/go-testdeep/helpers/tdsuite#PreTest)
and
[PostTest](https://pkg.go.dev/github.com/maxatome/go-testdeep/helpers/tdsuite#PostTest)
are respectively called before and after each test

[BetweenTests](https://pkg.go.dev/github.com/maxatome/go-testdeep/helpers/BetweenTests)
is called between 2 consecutive tests (after the PostTest call of
previous test but before the PreTest call of next test)

If a hook returns a non-nil error, the suite fails immediately


## tdsuite — Composing suites — 3/3

.code tdsuite.go /compose-begin/,/compose-end/


## End

.background logo-rev.svg

Some stats:
- +44k lines of go code
- 99.92% code coverage
- go report A+
- 27 releases since 2018

Links:
- [Home page](https://go-testdeep.zetta.rocks/)
- [godoc](https://pkg.go.dev/github.com/maxatome/go-testdeep/td)
- [godoc API tester — tdhttp](https://pkg.go.dev/github.com/maxatome/go-testdeep/helpers/tdhttp)
- [godoc testing suite — tdsuite](https://pkg.go.dev/github.com/maxatome/go-testdeep/helpers/tdsuite)
- [godoc helpers utils — tdutil](https://pkg.go.dev/github.com/maxatome/go-testdeep/helpers/tdutil)
- [Github](https://github.com/maxatome/go-testdeep) ← _don't forget to_ ⭐ :)
