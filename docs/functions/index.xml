<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Functions :: go-testdeep</title><link>https://go-testdeep.zetta.rocks/functions/index.html</link><description>import ( "testing" "github.com/maxatome/go-testdeep/td" ) func TestMyFunc(t *testing.T) { // Compares MyFunc() result against a fixed value td.Cmp(t, MyFunc(), 128, "MyFunc() result is 128") // Compares MyFunc() result using the Between Testdeep operator td.Cmp(t, MyFunc(), td.Between(100, 199), "MyFunc() result is between 100 and 199") } func Cmp(t TestingT, got, expected any, args ...any) bool func CmpError(t TestingT, got error, args ...any) bool func CmpFalse(t TestingT, got any, args ...any) bool func CmpLax(t TestingT, got, expected any, args ...any) bool (in fact the shortcut of Lax operator) func CmpNoError(t TestingT, got error, args ...any) bool func CmpNot(t TestingT, got, notExpected any, args ...any) bool (in fact the shortcut of Not operator) func CmpNotPanic(t TestingT, fn func(), args ...any) bool func CmpPanic(t TestingT, fn func(), expectedPanic any, args ...any) bool func CmpTrue(t TestingT, got any, args ...any) bool func EqDeeply(got, expected any) bool func EqDeeplyError(got, expected any) error CmpDeeply() is now replaced by Cmp(), but it is still available for backward compatibility purpose.</description><generator>Hugo</generator><language>en-us</language><atom:link href="https://go-testdeep.zetta.rocks/functions/index.xml" rel="self" type="application/rss+xml"/><item><title>td.T</title><link>https://go-testdeep.zetta.rocks/functions/td-t/index.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://go-testdeep.zetta.rocks/functions/td-t/index.html</guid><description>Constructing *td.T import ( "testing" "github.com/maxatome/go-testdeep/td" ) func TestMyFunc(tt *testing.T) { t := td.NewT(tt) t.Cmp(MyFunc(), 12) } func NewT(t testing.TB, config ...ContextConfig) *T func Assert(t testing.TB, config ...ContextConfig) *T func Require(t testing.TB, config ...ContextConfig) *T func AssertRequire(t testing.TB, config ...ContextConfig) (assert, require *T) Configuring *td.T func TestMyFunc(tt *testing.T) { t := td.NewT(tt).UseEqual().RootName("RECORD") ... } func (t *T) BeLax(enable ...bool) *T func (t *T) FailureIsFatal(enable ...bool) *T func (t *T) IgnoreUnexported(types ...any) *T func (t *T) RootName(rootName string) *T func (t *T) UseEqual(types ...any) *T Main methods of *td.T import ( "testing" "github.com/maxatome/go-testdeep/td" ) func TestMyFunc(tt *testing.T) { t := td.NewT(tt).UseEqual() // Compares MyFunc() result against a fixed value t.Cmp(MyFunc(), 128, "MyFunc() result is 128") // Compares MyFunc() result using the Between Testdeep operator t.Cmp(MyFunc(), td.Between(100, 199), "MyFunc() result is between 100 and 199") } func (t *T) Cmp(got, expected any, args ...any) bool func (t *T) CmpError(got error, args ...any) bool func (t *T) CmpLax(got, expected any, args ...any) bool (in fact the shortcut of Lax operator) func (t *T) CmpNoError(got error, args ...any) bool func (t *T) CmpNotPanic(fn func(), args ...any) bool func (t *T) CmpPanic(fn func(), expected any, args ...any) bool func (t *T) False(got any, args ...any) bool func (t *T) Not(got, notExpected any, args ...any) bool (in fact the shortcut of Not operator) func (t *T) Run(name string, f func(t *T)) bool func (t *T) RunAssertRequire(name string, f func(assert, require *T)) bool func (t *T) True(got any, args ...any) bool CmpDeeply() method is now replaced by Cmp(), but it is still available for backward compatibility purpose.</description></item></channel></rss>