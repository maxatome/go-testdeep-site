<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Tutorial :: go-testdeep</title><link>https://go-testdeep.zetta.rocks/example/index.html</link><description>Imagine a function returning a struct containing a newly created database record. The Id and the CreatedAt fields are set by the database layer:
type Record struct { Id uint64 Name string Age int CreatedAt time.Time } func CreateRecord(name string, age int) (*Record, error) { // Do INSERT INTO … and return newly created record or error if it failed }</description><generator>Hugo</generator><language>en-us</language><atom:link href="https://go-testdeep.zetta.rocks/example/index.xml" rel="self" type="application/rss+xml"/><item><title>Using testing package</title><link>https://go-testdeep.zetta.rocks/example/using-testing/index.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://go-testdeep.zetta.rocks/example/using-testing/index.html</guid><description>To check the freshly created record contents using standard testing package, we have to do something like that:
import ( "testing" "time" ) func TestCreateRecord(t *testing.T) { before := time.Now().Truncate(time.Second) record, err := CreateRecord("Bob", 23) if err != nil { t.Errorf("An error occurred: %s", err) } else { expected := Record{Name: "Bob", Age: 23} if record.Id == 0 { t.Error("Id probably not initialized") } if record.Name != expected.Name { t.Errorf("Name field differs, got=%s, expected=%s", record.Name, expected.Name) } if record.Age != expected.Age { t.Errorf("Age field differs, got=%d, expected=%d", record.Age, expected.Age) } if before.After(record.CreatedAt) || time.Now().Before(record.CreatedAt) { t.Errorf("CreatedAt field not expected: %s", record.CreatedAt) } } } Test in in playground: https://play.golang.org/p/Qyc7L2z1Rf-</description></item><item><title>Basic go-testdeep approach</title><link>https://go-testdeep.zetta.rocks/example/basic-testdeep/index.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://go-testdeep.zetta.rocks/example/basic-testdeep/index.html</guid><description>td package, via its Cmp* functions, handles the tests and all the error message boiler plate. Let’s do it:
import ( "testing" "time" "github.com/maxatome/go-testdeep/td" ) func TestCreateRecord(t *testing.T) { before := time.Now().Truncate(time.Second) record, err := CreateRecord("Bob", 23) if td.CmpNoError(t, err) { td.Cmp(t, record.Id, td.NotZero(), "Id initialized") td.Cmp(t, record.Name, "Bob") td.Cmp(t, record.Age, 23) td.Cmp(t, record.CreatedAt, td.Between(before, time.Now())) } } Test it in playground: https://play.golang.org/p/bfe-aj_gx8Q
As we cannot guess the Id field value before its creation, we use the NotZero operator to check it is set by CreateRecord() call. The same is true for the creation date field CreatedAt. Thanks to the Between operator we can check it is set with a value included between the date before CreateRecord() call and the date just after.</description></item><item><title>Advanced go-testdeep technique</title><link>https://go-testdeep.zetta.rocks/example/advanced-testdeep/index.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://go-testdeep.zetta.rocks/example/advanced-testdeep/index.html</guid><description>Of course we can test struct fields one by one, but with go-testdeep and the [td package], the whole struct can be compared with one Cmp call.
We can choose to ignore the non-guessable fields set by CreateRecord():
import ( "testing" "time" "github.com/maxatome/go-testdeep/td" ) func TestCreateRecord(t *testing.T) { record, err := CreateRecord("Bob", 23) if td.CmpNoError(t, err) { td.Cmp(t, record, td.Struct( &amp;Record{ Name: "Bob", Age: 23, }), "Newly created record") } } Test in in playground: https://go.dev/play/p/X9mYj9UxgSf
The Struct operator, used here, ignores zero fields in its model parameter.</description></item><item><title>go-testdeep Cmp shortcuts</title><link>https://go-testdeep.zetta.rocks/example/td-cmp-shortcuts/index.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://go-testdeep.zetta.rocks/example/td-cmp-shortcuts/index.html</guid><description>The Cmp function is the keystone of this package, but to make the writing of tests even easier, the family of Cmp* functions are provided and act as shortcuts. Using CmpStruct function, the previous example can be written as:
import ( "testing" "time" "github.com/maxatome/go-testdeep/td" ) func TestCreateRecord(t *testing.T) { before := time.Now().Truncate(time.Second) record, err := CreateRecord("Bob", 23) if td.CmpNoError(t, err) { td.CmpStruct(t, record, &amp;Record{ Name: "Bob", Age: 23, }, td.StructFields{ "Id": td.NotZero(), "CreatedAt": td.Between(before, time.Now()), }, "Newly created record") } } Test it in playground: https://play.golang.org/p/d2FxGASUa_B</description></item><item><title>td.T type</title><link>https://go-testdeep.zetta.rocks/example/td-t/index.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://go-testdeep.zetta.rocks/example/td-t/index.html</guid><description>testing.T can also be encapsulated in td.T type, simplifying again the test:
import ( "testing" "time" "github.com/maxatome/go-testdeep/td" ) func TestCreateRecord(tt *testing.T) { t := td.NewT(tt) before := time.Now().Truncate(time.Second) record, err := CreateRecord("Bob", 23) if t.CmpNoError(err) { t := t.RootName("RECORD") // Use RECORD instead of DATA in failure reports // Using Struct shortcut method t.Struct(record, &amp;Record{ Name: "Bob", Age: 23, }, td.StructFields{ "Id": td.NotZero(), "CreatedAt": td.Between(before, time.Now()), }, "Newly created record") // Or using Cmp method, it's a matter of taste t.Cmp(record, td.Struct( &amp;Record{ Name: "Bob", Age: 23, }, td.StructFields{ "Id": td.NotZero(), "CreatedAt": td.Between(before, time.Now()), }), "Newly created record") } } Test it in playground: https://play.golang.org/p/sH4PRrVjqFM</description></item><item><title>Using anchoring</title><link>https://go-testdeep.zetta.rocks/example/anchoring/index.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://go-testdeep.zetta.rocks/example/anchoring/index.html</guid><description>Operators can also directly be anchored in litterals, still using the td.T type, avoiding the use of the Struct operator:
import ( "testing" "time" "github.com/maxatome/go-testdeep/td" ) func TestCreateRecord(tt *testing.T) { t := td.NewT(tt) before := time.Now().Truncate(time.Second) record, err := CreateRecord("Bob", 23) if t.CmpNoError(err) { // Use RECORD instead of DATA in failure reports t.RootName("RECORD"). Cmp(record, &amp;Record{ Name: "Bob", Age: 23, Id: t.Anchor(td.NotZero(), uint64(0)).(uint64), CreatedAt: t.Anchor(td.Between(before, time.Now())).(time.Time), }, "Newly created record") } } Test it in playground: https://play.golang.org/p/OzoW5CSNUP5
See the Anchor method documentation for details. Note that A method is also a synonym for Anchor.</description></item><item><title>Using JSON</title><link>https://go-testdeep.zetta.rocks/example/using-json/index.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://go-testdeep.zetta.rocks/example/using-json/index.html</guid><description>JSON is a first class citizen in go-testdeep world thanks to its specific operators: JSON, SubJSONOf, SuperJSONOf and JSONPointer.
import ( "testing" "time" "github.com/maxatome/go-testdeep/td" ) func TestCreateRecord(tt *testing.T) { t := td.NewT(tt) before := time.Now().Truncate(time.Second) record, err := CreateRecord("Bob", 23) if t.CmpNoError(err) { t = t.RootName("RECORD") // Use RECORD instead of DATA in failure reports t.Cmp(record, td.JSON(` { "Name": "Bob", "Age": 23, "Id": NotZero(), // comments and operators allowed! "CreatedAt": $1 }`, td.Between(before, time.Now()), ), "Newly created record") } } Test it in playground: https://play.golang.org/p/pUC-RMPWyhu</description></item></channel></rss>